import telebot
import schedule
import time
import threading
from datetime import datetime
import logging

from config import BOT_TOKEN
from database import Database
from parser import get_player_status

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN)
db = Database()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "üëã –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ Vimeworld\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/spectate <–Ω–∏–∫> - –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "/stop <–Ω–∏–∫> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞\n"
    )
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['spectate'])
def spectate_player(message):
    try:
        if len(message.text.split()) < 2:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: /spectate <–Ω–∏–∫>")
            return

        player_nickname = message.text.split()[1].strip()
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        current_status = get_player_status(player_nickname)
        if current_status is None:
            bot.reply_to(message, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if db.add_tracked_player(user_id, player_nickname):
            db.update_player_status(player_nickname, current_status)
            bot.reply_to(
                message,
                f"‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∏–≥—Ä–æ–∫–∞ {player_nickname}\n"
                f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}"
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ spectate: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@bot.message_handler(commands=['list'])
def list_players(message):
    try:
        user_id = message.from_user.id
        tracked_players = [
            player for user, player in db.get_tracked_players() 
            if user == user_id
        ]
        
        if not tracked_players:
            bot.reply_to(message, "üìù –í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
            return
        
        players_list = "\n".join([
            f"‚Ä¢ {player} - {db.get_player_status(player) or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            for player in tracked_players
        ])
        
        bot.reply_to(message, f"üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏:\n{players_list}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@bot.message_handler(commands=['stop'])
def stop_tracking(message):
    try:
        if len(message.text.split()) < 2:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: /stop <–Ω–∏–∫>")
            return

        player_nickname = message.text.split()[1].strip()
        user_id = message.from_user.id

        if db.remove_tracking(user_id, player_nickname):
            bot.reply_to(message, f"‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ {player_nickname}")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def check_statuses_job():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤... {datetime.now()}")
    
    try:
        all_players = set(player for _, player in db.get_tracked_players())
        
        for player_nickname in all_players:
            try:
                current_status = get_player_status(player_nickname)
                if current_status is None:
                    continue
                    
                last_status = db.get_player_status(player_nickname)
                
                if last_status != current_status:
                    logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ {player_nickname}: {last_status} -> {current_status}")
                    db.update_player_status(player_nickname, current_status)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    user_ids = db.get_users_tracking_player(player_nickname)
                    for user_id in user_ids:
                        try:
                            bot.send_message(
                                user_id,
                                f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!\n"
                                f"–ò–≥—Ä–æ–∫: {player_nickname}\n"
                                f"–ë—ã–ª: {last_status}\n"
                                f"–°—Ç–∞–ª: {current_status}"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {player_nickname}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_statuses_job: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    schedule.every(30).seconds.do(check_statuses_job)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    logger.info("üìä –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()